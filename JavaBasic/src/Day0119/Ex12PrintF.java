package Day0119;
// printf 사용법
// printf는 우리가 형식에 맞추어 출력할 내용을
// %문자를 사용하여 형식을 지정해주게 된다.

public class Ex12PrintF {
    public static void main(String[] args) {
        
        
        
        //1. 10진법 정수('d'ecimal) 디씨몰
        int number = 12345;
       
        
        //A. 10진법 정수를 그대로 출력해라
        System.out.printf("1-A. [%d]\n", number);
        
        //B. 10진법 정수를 10자리 오른쪽 정력해서 출력해라
        System.out.printf("1-B. [%10d]\n", number);
        
        //C. 10진법 정수를 3자리 오른쪽 정렬해서 출력해라
        //   만약 출력해야할 내용이 우리가 지정할 자릿수보다 많으면
        //   우리가 지정한 자릿수는 무시가 된다. 
        //     아래 코드에서는↓ int number가 12345 이렇게 5자리 이므로
        //       그냥 12345 이렇게 나온다.
        System.out.printf("1-C. [%3d]\n", number);
        
        //D. 10진법 정수를 10자리 왼쪽 정렬해서 출력해라
        System.out.printf("1-D. [%-10d]\n", number);
        
        //E. 10진법 정수를 10자리 오른쪽 정렬하고
        //   왼쪽 빈 자리는 0으로 채워서 출력해라
        System.out.printf("1-F. [%010d]\n", number);
        
        //2. 16진법(he'x'adecimal)
        //   16진법? 0부터 15까지의 수로 16의 곱을 나타냄.
        //   10~15 까지는 어떻게 나타낼까?
        //   -> 알파벳으로 표현 가능하다! 예를 들면..
        //   10:A
        //   11:B
        //   12:C
        //    ...
        //   15:F 이런식으로 가능.
        //  따라서 1011 이면 AB로 표현할 수 있음.  -> 이때 알파벳은 대소문자 출력 가능 (↓ 아래 A.B.참고)
        
        number = 95;
        //A. 16진법 정수를 그대로 출력하되 알파벳이 있으면 소문자(x)로 출력해라
        System.out.printf("2-A. [%x]\n", number);
        //B. 16진법 정수를 그대로 출력하되 알파벳이 있으면 대문자(X)로 출력해라
        System.out.printf("2-A. [%X]\n", number);
        //C. 16진법 정수를 8자리 왼쪽 정렬하고 알파벳이 있으면 소문자로 출력해라
        System.out.printf("2-C. [%-8x]\n", number);
        //D. 16진법 정수를 8자리 오른쪽 정렬하고 알파벳이 있으면 대문자로 출력해라
        System.out.printf("2-D. [%8X]\n", number);
        //E. 16진법 정수를 8자리 오른쪽 정렬하고 알파벳이 있으면 대문자로 출력하되
        //   왼쪽 빈 자리는 0으로 채워라
        System.out.printf("2-E. [%08X]\n", number);
        
        
        //3. 실수('f'loat)
        //   비록 우리가 %f 를 사용하지만 실제론 double 이 되었던
        //   float이 되었던 상관이 없다. 그니까 double을 적겠음. ↓
        double d = 12.345;
        //A. 실수를 그대로 출력해라
        System.out.printf("3-A. [%f]\n", d);
        //이때 12.345000 총 9자리로 나옴.-> .도 한자리로 칩니다.
        // 근데 왜 12.345가 12.345000으로 뜨는 걸까? -> 정확성을 위해서 0을 붙인거임!!
        // 12.345가 사실 12.3454444일 수도 있는 거자나?!!
        // 그래서 정확하게 12.345000으로 해줄 수 있는 것임!!
        // 즉 오차 범위를 줄이기 위함임.
        
        //B. 실수를 6자리로 출력해라
        System.out.printf("3-B. [%6f]\n", d);
        //-> 무시되고 12.345000 로 나옴. 원래수보다 적은 자리를 출력하고자 하면 무시되는거임.
        
        //C. 실수를 12자리로 출력해라
        System.out.printf("3-C. [%12f]\n", d);
        
        //D. 실수를 소숫점 2번째 자리까지 출력해라
        System.out.printf("3-D. [%.2f]\n", d);
        //-> 반올림해서 2자리로 맞춰주는걸 확인할 수 있다.
        
        //E. 실수를 소숫점 2번째 자리까지 출력하고 총 6자리로 출력해라
        System.out.printf("3-E. [%6.2f]\n", d);
        //-> 소숫점 자리를 정해줬기 때문에 왼쪽에 공백을 두고 자릿수를 맞춰주는 것을 확인할 수 있다.
        
        
        
        //4. 스트링('S'tring)
        // -> 스트링에서는 왼쪽 빈 공간을 0으로 채워라 안됨.
        // -> 아무것도 없어서 0인건지 그 0이 스트링인지 모르기 때문.
        
        String str = new String("abcDEF");
        //A. 스트링을 그대로 출력해라
        System.out.printf("4-A. [%s]\n", str);
        //B. 스트링을 모두 대문자로 출력해라
        System.out.printf("4-B. [%S]\n", str);
        
        // printf 를 사용할 때 알아두면 좋은점
        // 1. 출력할 내용을 여러가지 % 문자를 사용해서 조합할 수도 있다.
        //    -> 그대로, 대문자, 정렬, 자릿수 등등
        System.out.printf("이름: %s, 총 가입일수: %d일\n", "조재영", 1234);
        // 2. 존재하지 않는 %문자를 사용하면 에러가 난다.
        // System.out.printf("%m\n", 1234); -> m은 없는 문자
        // 3. %문자와 맞지 않는 값을 넘겨주면 에러가 난다.
        // System.out.printf("%d\n", 12.34); -> 여기서 d는 %를 다룰 수(?) 없음.
        // 4. %문자의 갯수보다 넘겨주는 값의 갯수가 많으면 문제가 없다.
        System.out.printf("%d %d %d \n", 1, 2, 3, 4, 5);
        // 5. %문자의 갯수가 넘겨주는 값의 갯수보다 많으면 에러가 난다.
        // System.out.printf("%d %d %d \n", 1, 2);
        // ->  java.util.MissingFormatArgumentException -> 모자르다며 에러 뜬다.
        
        
        
    }
}










